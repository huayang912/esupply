//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行库版本:2.0.50727.1378
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 2.0.50727.1378 版自动生成。
// 
#pragma warning disable 1591

namespace SPCubeUtility.UploadService {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1378")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WSUploadSoap", Namespace="http://tempuri.org/")]
    public partial class WSUpload : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback UploadDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetDocumentSecurityOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public WSUpload() {
            this.Url = global::SPCubeUtility.Properties.Settings.Default.SPCubeUtility_UploadDocument_WSUpload;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event UploadDocumentCompletedEventHandler UploadDocumentCompleted;
        
        /// <remarks/>
        public event SetDocumentSecurityCompletedEventHandler SetDocumentSecurityCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadDocument", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadDocument(string fileName, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] fileContents, string pathFolder) {
            object[] results = this.Invoke("UploadDocument", new object[] {
                        fileName,
                        fileContents,
                        pathFolder});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadDocumentAsync(string fileName, byte[] fileContents, string pathFolder) {
            this.UploadDocumentAsync(fileName, fileContents, pathFolder, null);
        }
        
        /// <remarks/>
        public void UploadDocumentAsync(string fileName, byte[] fileContents, string pathFolder, object userState) {
            if ((this.UploadDocumentOperationCompleted == null)) {
                this.UploadDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadDocumentOperationCompleted);
            }
            this.InvokeAsync("UploadDocument", new object[] {
                        fileName,
                        fileContents,
                        pathFolder}, this.UploadDocumentOperationCompleted, userState);
        }
        
        private void OnUploadDocumentOperationCompleted(object arg) {
            if ((this.UploadDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadDocumentCompleted(this, new UploadDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetDocumentSecurity", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SetDocumentSecurity(string filepath, string[] User, string[] Permission, bool OldPermissionBreak) {
            object[] results = this.Invoke("SetDocumentSecurity", new object[] {
                        filepath,
                        User,
                        Permission,
                        OldPermissionBreak});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SetDocumentSecurityAsync(string filepath, string[] User, string[] Permission, bool OldPermissionBreak) {
            this.SetDocumentSecurityAsync(filepath, User, Permission, OldPermissionBreak, null);
        }
        
        /// <remarks/>
        public void SetDocumentSecurityAsync(string filepath, string[] User, string[] Permission, bool OldPermissionBreak, object userState) {
            if ((this.SetDocumentSecurityOperationCompleted == null)) {
                this.SetDocumentSecurityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetDocumentSecurityOperationCompleted);
            }
            this.InvokeAsync("SetDocumentSecurity", new object[] {
                        filepath,
                        User,
                        Permission,
                        OldPermissionBreak}, this.SetDocumentSecurityOperationCompleted, userState);
        }
        
        private void OnSetDocumentSecurityOperationCompleted(object arg) {
            if ((this.SetDocumentSecurityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetDocumentSecurityCompleted(this, new SetDocumentSecurityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1378")]
    public delegate void UploadDocumentCompletedEventHandler(object sender, UploadDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1378")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1378")]
    public delegate void SetDocumentSecurityCompletedEventHandler(object sender, SetDocumentSecurityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1378")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetDocumentSecurityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetDocumentSecurityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591